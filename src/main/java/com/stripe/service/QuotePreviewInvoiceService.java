// File generated from our OpenAPI spec
package com.stripe.service;

import com.google.gson.reflect.TypeToken;
import com.stripe.exception.StripeException;
import com.stripe.model.InvoiceLineItem;
import com.stripe.model.QuotePreviewInvoice;
import com.stripe.model.StripeCollection;
import com.stripe.net.ApiMode;
import com.stripe.net.ApiRequestParams;
import com.stripe.net.ApiResource;
import com.stripe.net.ApiService;
import com.stripe.net.BaseAddress;
import com.stripe.net.RequestOptions;
import com.stripe.net.StripeResponseGetter;
import com.stripe.param.QuotePreviewInvoiceListLinesParams;
import com.stripe.param.QuotePreviewInvoiceListParams;

public final class QuotePreviewInvoiceService extends ApiService {
  public QuotePreviewInvoiceService(StripeResponseGetter responseGetter) {
    super(responseGetter);
  }

  /** Preview the invoices that would be generated by accepting the quote. */
  public StripeCollection<QuotePreviewInvoice> list(
      String quote, QuotePreviewInvoiceListParams params) throws StripeException {
    return list(quote, params, (RequestOptions) null);
  }
  /** Preview the invoices that would be generated by accepting the quote. */
  public StripeCollection<QuotePreviewInvoice> list(String quote, RequestOptions options)
      throws StripeException {
    return list(quote, (QuotePreviewInvoiceListParams) null, options);
  }
  /** Preview the invoices that would be generated by accepting the quote. */
  public StripeCollection<QuotePreviewInvoice> list(String quote) throws StripeException {
    return list(quote, (QuotePreviewInvoiceListParams) null, (RequestOptions) null);
  }
  /** Preview the invoices that would be generated by accepting the quote. */
  public StripeCollection<QuotePreviewInvoice> list(
      String quote, QuotePreviewInvoiceListParams params, RequestOptions options)
      throws StripeException {
    String path = String.format("/v1/quotes/%s/preview_invoices", ApiResource.urlEncodeId(quote));
    return getResponseGetter()
        .request(
            BaseAddress.API,
            ApiResource.RequestMethod.GET,
            path,
            ApiRequestParams.paramsToMap(params),
            new TypeToken<StripeCollection<QuotePreviewInvoice>>() {}.getType(),
            options,
            ApiMode.V1);
  }
  /** Preview the invoice line items that would be generated by accepting the quote. */
  public StripeCollection<InvoiceLineItem> listLines(
      String quote, String previewInvoice, QuotePreviewInvoiceListLinesParams params)
      throws StripeException {
    return listLines(quote, previewInvoice, params, (RequestOptions) null);
  }
  /** Preview the invoice line items that would be generated by accepting the quote. */
  public StripeCollection<InvoiceLineItem> listLines(
      String quote, String previewInvoice, RequestOptions options) throws StripeException {
    return listLines(quote, previewInvoice, (QuotePreviewInvoiceListLinesParams) null, options);
  }
  /** Preview the invoice line items that would be generated by accepting the quote. */
  public StripeCollection<InvoiceLineItem> listLines(String quote, String previewInvoice)
      throws StripeException {
    return listLines(
        quote, previewInvoice, (QuotePreviewInvoiceListLinesParams) null, (RequestOptions) null);
  }
  /** Preview the invoice line items that would be generated by accepting the quote. */
  public StripeCollection<InvoiceLineItem> listLines(
      String quote,
      String previewInvoice,
      QuotePreviewInvoiceListLinesParams params,
      RequestOptions options)
      throws StripeException {
    String path =
        String.format(
            "/v1/quotes/%s/preview_invoices/%s/lines",
            ApiResource.urlEncodeId(quote), ApiResource.urlEncodeId(previewInvoice));
    return getResponseGetter()
        .request(
            BaseAddress.API,
            ApiResource.RequestMethod.GET,
            path,
            ApiRequestParams.paramsToMap(params),
            new TypeToken<StripeCollection<InvoiceLineItem>>() {}.getType(),
            options,
            ApiMode.V1);
  }
}
